plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(':common').loom.accessWidenerPath

    runs {
        data {
            inherit client

            name "Data Generation"

            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("../common/src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${project.mod_id}"

            runDir "build/datagen"
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive = false }
    shadowCommon(project(path: ':common', configuration: 'transformProductionFabric')) { transitive = false }
}

shadowJar {
    exclude 'architectury.common.json'

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = 'dev'
}

sourcesJar {
    def commonSources = project(':common').sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

remapJar {
    archiveClassifier = 'fabric'
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
