plugins {
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'dev.architectury.loom' version '1.3-SNAPSHOT' apply false
}

architectury {
    minecraft = project.minecraft_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'

    loom {
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    group = project.project_group
    archivesBaseName = project.archives_base_name

    version = project.mod_version

    repositories {

    }

    def targetJavaVersion = 17
    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
            it.options.release = targetJavaVersion
        }
    }

    java {
        def javaVersion = JavaVersion.toVersion(targetJavaVersion)
        if (JavaVersion.current() < javaVersion) {
            toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }
        archivesBaseName = project.archives_base_name
        withSourcesJar()
    }

    jar {
        from('LICENSE') {
            rename { "${it}_${project.archivesBaseName}" }
        }
    }

    processResources {
        var resourcesToReplace = ['build.properties', 'META-INF/mods.toml', 'pack.mcmeta', 'fabric.mod.json']

        var replaceTokens = [
                minecraft_version: minecraft_version,
                mod_id: mod_id,
                mod_name: mod_name,
                mod_version: mod_version,
                mod_description: mod_description,
                fabric_loader_version: fabric_loader_version,
                fabric_api_version: fabric_api_version,
                forge_version: forge_version,
                next_minecraft_version: next_minecraft_version,
                next_forge_loader_version: next_forge_loader_version,
                next_forge_version: next_forge_version
        ]

        inputs.properties replaceTokens
        filteringCharset 'UTF-8'

        filesMatching(resourcesToReplace) {
            expand replaceTokens
        }
    }

    publishing {
        publications {
            mavenCommon(MavenPublication) {
                artifactId = rootProject.archives_base_name
                from components.java
            }
        }

        repositories {
            mavenLocal()
        }
    }
}
