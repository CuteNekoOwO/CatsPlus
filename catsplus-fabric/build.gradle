plugins {
    id 'com.github.johnrengelman.shadow' version "${shadow_plugin_version}"
    id 'me.shedaniel.unified-publishing' version "${unified_publishing_version}"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(':').loom.accessWidenerPath

    runs {
        data {
            inherit client

            name "Data Generation"

            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("../src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${project.mod_id}"

            runDir "build/datagen"
        }
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    common(project(path: ':', configuration: 'namedElements')) { transitive = false }
    shadowCommon(project(path: ':', configuration: 'transformProductionFabric')) { transitive = false }
}

shadowJar {
    exclude 'architectury.common.json'

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(':').sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = project.name
            from components.java
        }
    }
}
